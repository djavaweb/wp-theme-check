#!/usr/bin/env node

const path = require('path')
const program = require('caporal')
const updateNotifier = require('update-notifier')
const ora = require('ora')
const pkg = require('../package.json')
const themeCheck = require('../src/theme-check')
const {validatorTypes, validatorLabels, validatorThemeCheckLabels} = require('../src/fixtures')
const logger = require('../src/logger')

const action = (args) => {
  const spinner = ora('Checking theme...')

  logger.blank()
  spinner.start()
  logger.blank()

  const nonZeroExit = err => {
    spinner.stop()
    logger.error(err.message)
    process.exit(1)
  }

  themeCheck(args.path).then(results => {
    let errors = 0
    let warnings = 0

    spinner.stop()

    Promise.all(results.map(
      (validator, index) => new Promise(resolve => {
        if (validator.result.length > 0) {
          errors += validator.result.length

          logger.blank()

          if (index > 0) {
            logger.blank()
            logger.blank()
          }

          logger.title(validatorLabels[validator.id])
          logger.blank()

          Promise.all(validator.result.map(
            (item, index) => new Promise(resolve => {
              if (index > 0) {
                logger.blank()
              }

              if (validator.name === validatorTypes.THEME_MENTOR) {
                logger.underline(`${path.join(args.path, item.filename)}:${item.line}`)
                logger.error(item)
              } else {
                logger.underline(validatorThemeCheckLabels[item.label])
                item.items.forEach(log => {
                  if (log.type === 'warning') {
                    warnings++
                  }
                  logger.error2(log)
                })
              }
              resolve()
            })
          )).then(resolve).catch(nonZeroExit)

        } else {
          resolve()
        }
      })
    )).then(() => {
      logger.blank()

      if (errors > 0 || warnings > 0) {
        let notice = 'You\'ve got'

        if (errors > 0) {
          notice += ` ${errors} errors`
        }

        if (warnings > 0) {
          if (warnings > 0) {
            notice += ' and'
          }
          notice += ` ${warnings} warnings`
        }

        notice += '.'

        logger.blank()
        logger.error(notice)
      } else {
        logger.done('Your theme have no errors.')
      }

      logger.blank()
    }).catch(nonZeroExit)
  }).catch(nonZeroExit)
}

program
  .version(pkg.version)
  .description('WordPress Theme Check')
  .argument('[path]', 'Script path could be theme directory.')
  .option('--with-theme-mentor', 'Only use theme mentor as validator.', program.BOOLEAN)
  .option('--with-theme-check', 'Only use theme check as validator.', program.BOOLEAN)
  .action(action)

program.parse(process.argv)

// Notify update, cached every hour
updateNotifier({
  pkg,
  updateCheckInterval: 1000 * 60 * 60
}).notify()
